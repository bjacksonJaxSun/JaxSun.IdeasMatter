#!/bin/bash

# Claude Code Command: Create Vision from Document
# This script automates the entire process from document to GitHub vision creation

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Script directory
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
COMMANDS_DIR="$(dirname "$SCRIPT_DIR")"
REPO_ROOT="$(dirname "$COMMANDS_DIR")"

# Default values
PREVIEW_MODE=false
PRODUCT_NAME=""
VISION_DOC=""

# Function to display usage
usage() {
    echo "Usage: $0 <vision_document> <product_name> [--preview]"
    echo ""
    echo "Arguments:"
    echo "  vision_document   Path to vision document (.docx or .md)"
    echo "  product_name      Name of the product (e.g., 'Ideas Matter')"
    echo "  --preview         Run in preview mode (no changes made)"
    echo ""
    echo "Examples:"
    echo "  $0 /path/to/vision.docx 'Ideas Matter'"
    echo "  $0 /path/to/vision.md 'My Product' --preview"
    exit 1
}

# Function to print status
print_status() {
    echo -e "${BLUE}[$(date +'%H:%M:%S')]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[$(date +'%H:%M:%S')] ✓${NC} $1"
}

print_error() {
    echo -e "${RED}[$(date +'%H:%M:%S')] ✗${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[$(date +'%H:%M:%S')] !${NC} $1"
}

# Parse arguments
if [ $# -lt 2 ]; then
    usage
fi

VISION_DOC="$1"
PRODUCT_NAME="$2"

# Check for preview flag
if [ "${3:-}" == "--preview" ]; then
    PREVIEW_MODE=true
fi

# Validate input file exists
if [ ! -f "$VISION_DOC" ]; then
    print_error "Vision document not found: $VISION_DOC"
    exit 1
fi

# Start process
echo ""
echo "=================================================="
echo -e "${BLUE}Claude Code Vision Creation Command${NC}"
echo "=================================================="
echo ""
print_status "Product Name: $PRODUCT_NAME"
print_status "Vision Document: $VISION_DOC"
print_status "Preview Mode: $PREVIEW_MODE"
echo ""

# Step 1: Process the vision document
print_status "Step 1: Processing vision document..."

# Determine file type and convert if necessary
VISION_MD=""
PRODUCT_DIR="$COMMANDS_DIR/docs/visions/$(echo "$PRODUCT_NAME" | tr '[:upper:]' '[:lower:]' | tr ' ' '-')"
mkdir -p "$PRODUCT_DIR"

if [[ "$VISION_DOC" == *.docx ]]; then
    print_status "Converting Word document to Markdown..."
    
    # Use Python script to convert
    python3 "$COMMANDS_DIR/scripts/vision-document-processor.py" \
        convert "$VISION_DOC" "$PRODUCT_DIR/vision.md" "$PRODUCT_NAME"
    
    VISION_MD="$PRODUCT_DIR/vision.md"
    print_success "Document converted successfully"
    
elif [[ "$VISION_DOC" == *.md ]]; then
    print_status "Processing Markdown document..."
    
    # Use Python script to process and validate
    python3 "$COMMANDS_DIR/scripts/vision-document-processor.py" \
        process "$VISION_DOC" "$PRODUCT_DIR/vision.md" "$PRODUCT_NAME"
    
    VISION_MD="$PRODUCT_DIR/vision.md"
    print_success "Document processed successfully"
else
    print_error "Unsupported file type. Please provide .docx or .md file"
    exit 1
fi

# Step 2: Validate the vision document
print_status "Step 2: Validating vision structure..."

if [ -x "$COMMANDS_DIR/scripts/github-cli/process-vision.sh" ]; then
    if "$COMMANDS_DIR/scripts/github-cli/process-vision.sh" "$VISION_MD" validate; then
        print_success "Vision validation passed"
    else
        print_error "Vision validation failed"
        exit 1
    fi
else
    print_warning "Validation script not found, skipping validation"
fi

# Step 3: Git operations
if [ "$PREVIEW_MODE" == "false" ]; then
    print_status "Step 3: Committing vision to Git..."
    
    cd "$REPO_ROOT"
    
    # Check if we're in a git repository
    if ! git rev-parse --git-dir > /dev/null 2>&1; then
        print_error "Not in a git repository"
        exit 1
    fi
    
    # Add and commit the vision
    git add "$VISION_MD"
    
    if git diff --cached --quiet; then
        print_warning "No changes to commit (vision may already exist)"
    else
        git commit -m "Add vision for $PRODUCT_NAME

- Created from: $(basename "$VISION_DOC")
- Location: $VISION_MD
- Generated by Claude Code command"
        
        print_success "Vision committed to Git"
    fi
    
    # Push to remote
    print_status "Pushing to GitHub..."
    
    if git push; then
        print_success "Pushed to GitHub successfully"
    else
        print_error "Failed to push to GitHub. Please check your connection and credentials"
        exit 1
    fi
else
    print_warning "Step 3: Skipping Git operations (preview mode)"
fi

# Step 4: Run GitHub workflow
print_status "Step 4: Running GitHub workflow..."

if [ "$PREVIEW_MODE" == "false" ]; then
    # Check if gh CLI is installed
    if ! command -v gh &> /dev/null; then
        print_error "GitHub CLI (gh) is not installed"
        print_status "Install it from: https://cli.github.com/"
        print_status ""
        print_status "After installing, run this command manually:"
        echo ""
        echo "  gh workflow run create-vision.yml \\"
        echo "    -f product_name='$PRODUCT_NAME' \\"
        echo "    -f vision_file_path='$(realpath --relative-to="$REPO_ROOT" "$VISION_MD")' \\"
        echo "    -f preview=false"
        exit 1
    fi
    
    # Get relative path for the workflow
    VISION_PATH_RELATIVE=$(realpath --relative-to="$REPO_ROOT" "$VISION_MD")
    
    print_status "Triggering workflow with:"
    print_status "  Product: $PRODUCT_NAME"
    print_status "  Vision: $VISION_PATH_RELATIVE"
    
    # Run the workflow
    cd "$REPO_ROOT"
    if gh workflow run create-vision.yml \
        -f product_name="$PRODUCT_NAME" \
        -f vision_file_path="$VISION_PATH_RELATIVE" \
        -f preview=false; then
        
        print_success "Workflow triggered successfully!"
        
        # Get workflow run URL
        sleep 2
        LATEST_RUN=$(gh run list --workflow=create-vision.yml --limit=1 --json url --jq '.[0].url')
        
        if [ -n "$LATEST_RUN" ]; then
            print_status "View workflow progress at:"
            echo "  $LATEST_RUN"
        fi
        
        print_status ""
        print_status "Once the workflow completes, you'll have:"
        print_status "  - Vision Issue (pinned to repository)"
        print_status "  - GitHub Project for $PRODUCT_NAME"
        print_status "  - All necessary labels created"
        
    else
        print_error "Failed to trigger workflow"
        print_status "Please run manually:"
        echo ""
        echo "  gh workflow run create-vision.yml \\"
        echo "    -f product_name='$PRODUCT_NAME' \\"
        echo "    -f vision_file_path='$VISION_PATH_RELATIVE' \\"
        echo "    -f preview=false"
    fi
else
    print_warning "Skipping workflow execution (preview mode)"
    print_status ""
    print_status "To run the workflow manually:"
    VISION_PATH_RELATIVE=$(realpath --relative-to="$REPO_ROOT" "$VISION_MD")
    echo ""
    echo "  gh workflow run create-vision.yml \\"
    echo "    -f product_name='$PRODUCT_NAME' \\"
    echo "    -f vision_file_path='$VISION_PATH_RELATIVE' \\"
    echo "    -f preview=false"
fi

# Summary
echo ""
echo "=================================================="
echo -e "${GREEN}Vision Creation Complete!${NC}"
echo "=================================================="
echo ""

if [ "$PREVIEW_MODE" == "true" ]; then
    print_warning "Preview mode - no changes were made"
    print_status "Vision prepared at: $VISION_MD"
    print_status "Run without --preview to create in GitHub"
else
    print_success "Vision document: $VISION_MD"
    print_success "Committed and pushed to GitHub"
    print_success "GitHub workflow triggered"
    print_status ""
    print_status "Next steps:"
    print_status "1. Wait for workflow to complete"
    print_status "2. Check Issues tab for the Vision issue"
    print_status "3. Run strategy generation workflow"
fi

echo ""