@page "/admin/users"
@using Jackson.Ideas.Core.DTOs.Auth
@using Jackson.Ideas.Web.Services
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Policy = "AdminOnly")]
@inject IAdminService AdminService
@inject ILogger<UserManagement> Logger

<PageTitle>User Management - Ideas Matter</PageTitle>

<div class="container-fluid">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1 class="h3">User Management</h1>
        <button class="btn btn-primary" @onclick="LoadUsers">
            <i class="fas fa-refresh"></i> Refresh
        </button>
    </div>

    @if (isLoading)
    {
        <div class="d-flex justify-content-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading users...</span>
            </div>
        </div>
    }
    else if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger" role="alert">
            <i class="fas fa-exclamation-triangle"></i> @errorMessage
        </div>
    }
    else if (users.Any())
    {
        <!-- Statistics Cards -->
        @if (stats != null)
        {
            <div class="row mb-4">
                <div class="col-md-3">
                    <div class="card bg-primary text-white">
                        <div class="card-body">
                            <div class="d-flex justify-content-between">
                                <div>
                                    <h5 class="card-title">Total Users</h5>
                                    <h3>@stats.TotalUsers</h3>
                                </div>
                                <div class="card-icon">
                                    <i class="fas fa-users fa-2x"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card bg-success text-white">
                        <div class="card-body">
                            <div class="d-flex justify-content-between">
                                <div>
                                    <h5 class="card-title">Verified</h5>
                                    <h3>@stats.VerifiedUsers</h3>
                                </div>
                                <div class="card-icon">
                                    <i class="fas fa-check-circle fa-2x"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card bg-warning text-white">
                        <div class="card-body">
                            <div class="d-flex justify-content-between">
                                <div>
                                    <h5 class="card-title">Unverified</h5>
                                    <h3>@stats.UnverifiedUsers</h3>
                                </div>
                                <div class="card-icon">
                                    <i class="fas fa-clock fa-2x"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card bg-info text-white">
                        <div class="card-body">
                            <div class="d-flex justify-content-between">
                                <div>
                                    <h5 class="card-title">Recent (7 days)</h5>
                                    <h3>@stats.RecentRegistrations</h3>
                                </div>
                                <div class="card-icon">
                                    <i class="fas fa-calendar fa-2x"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }

        <!-- Users Table -->
        <div class="card">
            <div class="card-header">
                <h5 class="mb-0">All Users</h5>
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th>Name</th>
                                <th>Email</th>
                                <th>Role</th>
                                <th>Status</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var user in users)
                            {
                                <tr>
                                    <td>@user.Name</td>
                                    <td>@user.Email</td>
                                    <td>
                                        <span class="badge @GetRoleBadgeClass(user.Role)">
                                            @user.Role
                                        </span>
                                    </td>
                                    <td>
                                        <span class="badge @(user.IsVerified ? "bg-success" : "bg-warning")">
                                            @(user.IsVerified ? "Verified" : "Unverified")
                                        </span>
                                    </td>
                                    <td>
                                        <div class="btn-group" role="group">
                                            <button class="btn btn-sm btn-outline-primary" 
                                                    @onclick="() => ShowEditUserModal(user)"
                                                    data-bs-toggle="modal" 
                                                    data-bs-target="#editUserModal">
                                                <i class="fas fa-edit"></i> Edit
                                            </button>
                                            <button class="btn btn-sm @(user.IsVerified ? "btn-outline-warning" : "btn-outline-success")"
                                                    @onclick="() => ToggleUserVerification(user.Id)">
                                                <i class="fas @(user.IsVerified ? "fa-times" : "fa-check")"></i>
                                                @(user.IsVerified ? "Unverify" : "Verify")
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="alert alert-info">
            <i class="fas fa-info-circle"></i> No users found.
        </div>
    }
</div>

<!-- Edit User Modal -->
<div class="modal fade" id="editUserModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Edit User</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                @if (editingUser != null)
                {
                    <div class="mb-3">
                        <label class="form-label">Name</label>
                        <input type="text" class="form-control" value="@editingUser.Name" readonly />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Email</label>
                        <input type="email" class="form-control" value="@editingUser.Email" readonly />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Role</label>
                        <select class="form-select" @bind="selectedRole">
                            <option value="User">User</option>
                            <option value="Admin">Admin</option>
                            <option value="SystemAdmin">System Admin</option>
                        </select>
                    </div>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" @onclick="SaveUserChanges">
                    <i class="fas fa-save"></i> Save Changes
                </button>
            </div>
        </div>
    </div>
</div>

@code {
    private List<UserInfo> users = new();
    private AdminStatsResponse? stats;
    private UserInfo? editingUser;
    private string selectedRole = string.Empty;
    private bool isLoading = true;
    private string errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
        await LoadStats();
    }

    private async Task LoadUsers()
    {
        isLoading = true;
        errorMessage = string.Empty;
        StateHasChanged();

        try
        {
            users = await AdminService.GetAllUsersAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading users");
            errorMessage = "Failed to load users. Please try again.";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadStats()
    {
        try
        {
            stats = await AdminService.GetStatsAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading admin stats");
        }
    }

    private void ShowEditUserModal(UserInfo user)
    {
        editingUser = user;
        selectedRole = user.Role;
    }

    private async Task SaveUserChanges()
    {
        if (editingUser != null && selectedRole != editingUser.Role)
        {
            try
            {
                var response = await AdminService.UpdateUserRoleAsync(editingUser.Id, selectedRole);
                if (response.IsSuccess)
                {
                    // Update the user in the list
                    var userToUpdate = users.FirstOrDefault(u => u.Id == editingUser.Id);
                    if (userToUpdate != null)
                    {
                        userToUpdate.Role = selectedRole;
                    }

                    // Refresh stats
                    await LoadStats();
                    StateHasChanged();
                }
                else
                {
                    errorMessage = response.Message ?? "Failed to update user role";
                }
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Error updating user role");
                errorMessage = "An error occurred while updating the user role";
            }
        }
    }

    private async Task ToggleUserVerification(string userId)
    {
        try
        {
            var response = await AdminService.ToggleUserVerificationAsync(userId);
            if (response.IsSuccess)
            {
                // Update the user in the list
                var userToUpdate = users.FirstOrDefault(u => u.Id == userId);
                if (userToUpdate != null)
                {
                    userToUpdate.IsVerified = !userToUpdate.IsVerified;
                }

                // Refresh stats
                await LoadStats();
                StateHasChanged();
            }
            else
            {
                errorMessage = response.Message ?? "Failed to toggle user verification";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error toggling user verification");
            errorMessage = "An error occurred while updating user verification";
        }
    }

    private string GetRoleBadgeClass(string role) => role switch
    {
        "SystemAdmin" => "bg-danger",
        "Admin" => "bg-warning",
        "User" => "bg-primary",
        _ => "bg-secondary"
    };
}

<style>
    .card-icon {
        opacity: 0.7;
    }

    .table th {
        background-color: #f8f9fa;
        font-weight: 600;
    }

    .btn-group .btn {
        margin-right: 0.25rem;
    }

    .btn-group .btn:last-child {
        margin-right: 0;
    }

    .badge {
        font-size: 0.75rem;
        padding: 0.375rem 0.75rem;
    }

    .modal-header {
        background-color: #f8f9fa;
        border-bottom: 1px solid #dee2e6;
    }

    .spinner-border {
        width: 3rem;
        height: 3rem;
    }
</style>