@rendermode InteractiveServer
@using Jackson.Ideas.Core.DTOs.Research
@using Jackson.Ideas.Core.Entities
@using Jackson.Ideas.Core.Enums
@using Jackson.Ideas.Web.Services
@using Microsoft.AspNetCore.Authorization
@inject IResearchSessionApiService ResearchService
@inject Jackson.Ideas.Web.Services.NavigationState NavigationState

<PageTitle>Research Session - Ideas Matter</PageTitle>

<div class="session-details-container">
    @if (isLoading)
    {
        <div class="loading-container">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p>Loading research session details...</p>
        </div>
    }
    else if (session != null)
    {
        <div class="session-header">
            <div class="header-content">
                <h1>@session.Title</h1>
                <div class="session-status-badge status-@session.Status.ToString().ToLower()">
                    @session.Status
                </div>
            </div>
            <div class="header-actions">
                <button class="btn btn-secondary" @onclick="GoBackToDashboard">
                    <i class="fas fa-arrow-left"></i> Back to Dashboard
                </button>
                @if (session.Status == ResearchStatus.Pending)
                {
                    <button class="btn btn-success" @onclick="StartResearch" disabled="@isStartingResearch">
                        @if (isStartingResearch)
                        {
                            <div class="spinner-border spinner-border-sm" role="status">
                                <span class="visually-hidden">Starting...</span>
                            </div>
                            <span>Starting Research...</span>
                        }
                       @*  else
                        {
                            <i class="fas fa-play"></i>
                            <span>Start Research</span>
                        } *@
                    </button>
                }
                @if (session.Status == ResearchStatus.InProgress)
                {
                    <button class="btn btn-primary" @onclick="RefreshSession">
                        <i class="fas fa-refresh"></i> Refresh Status
                    </button>
                }
            </div>
        </div>

        <div class="session-content">
            <div class="session-info">
                <div class="info-card">
                    <h3>Session Information</h3>
                    <div class="info-item">
                        <strong>Description:</strong>
                        <p>@session.Description</p>
                    </div>
                    <div class="info-item">
                        <strong>Research Type:</strong>
                        <span class="badge bg-primary">@session.ResearchType</span>
                    </div>
                    <div class="info-item">
                        <strong>Status:</strong>
                        <span class="badge bg-info">@session.Status</span>
                    </div>
                    <div class="info-item">
                        <strong>Created:</strong>
                        <span>@session.CreatedAt.ToString("MMM dd, yyyy HH:mm")</span>
                    </div>
                    @if (session.CompletedAt.HasValue)
                    {
                        <div class="info-item">
                            <strong>Completed:</strong>
                            <span>@session.CompletedAt.Value.ToString("MMM dd, yyyy HH:mm")</span>
                        </div>
                    }
                </div>

                @if (session.Status == ResearchStatus.InProgress)
                {
                    <div class="progress-card">
                        <h3>Research Progress</h3>
                        <div class="progress">
                            <div class="progress-bar" 
                                 role="progressbar" 
                                 style="width: @session.ProgressPercentage%"
                                 aria-valuenow="@session.ProgressPercentage" 
                                 aria-valuemin="0" 
                                 aria-valuemax="100">
                                @session.ProgressPercentage%
                            </div>
                        </div>
                        @if (session.EstimatedCompletionTime > 0)
                        {
                            <p>Estimated completion: @session.EstimatedCompletionTime minutes</p>
                        }
                    </div>
                }

                @if (!string.IsNullOrEmpty(session.ErrorMessage))
                {
                    <div class="error-card">
                        <h3>Error Information</h3>
                        <div class="alert alert-danger">
                            <i class="fas fa-exclamation-triangle"></i>
                            @session.ErrorMessage
                        </div>
                    </div>
                }
            </div>

            @if (session.ResearchInsights?.Any() == true)
            {
                <div class="insights-section">
                    <h3>Research Insights</h3>
                    <div class="insights-grid">
                        @foreach (var insight in session.ResearchInsights)
                        {
                            <div class="insight-card">
                                <h4>@insight.Title</h4>
                                <p>@insight.Content</p>
                                @if (!string.IsNullOrEmpty(insight.Category))
                                {
                                    <span class="badge bg-secondary">@insight.Category</span>
                                }
                            </div>
                        }
                    </div>
                </div>
            }

            @if (session.ResearchOptions?.Any() == true)
            {
                <div class="options-section">
                    <h3>Strategic Options</h3>
                    <div class="options-grid">
                        @foreach (var option in session.ResearchOptions)
                        {
                            <div class="option-card">
                                <h4>@option.Title</h4>
                                <p>@option.Description</p>
                                <div class="option-scores">
                                    <div class="score">
                                        <span>Feasibility:</span>
                                        <strong>@option.FeasibilityScore/10</strong>
                                    </div>
                                    <div class="score">
                                        <span>Impact:</span>
                                        <strong>@option.ImpactScore/10</strong>
                                    </div>
                                </div>
                                @if (!string.IsNullOrEmpty(option.Notes))
                                {
                                    <p class="option-notes">@option.Notes</p>
                                }
                            </div>
                        }
                    </div>
                </div>
            }
        </div>
    }
    else if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="error-container">
            <div class="alert alert-danger">
                <h3>Error Loading Session</h3>
                <p>@errorMessage</p>
                <button class="btn btn-primary" @onclick="GoBackToDashboard">
                    <i class="fas fa-arrow-left"></i> Back to Dashboard
                </button>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public Guid SessionId { get; set; }
    
    private ResearchSession? session;
    private bool isLoading = true;
    private bool isStartingResearch = false;
    private string errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadSession();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (SessionId != Guid.Empty)
        {
            await LoadSession();
        }
    }

    private async Task LoadSession()
    {
        try
        {
            isLoading = true;
            session = await ResearchService.GetSessionAsync(SessionId);
            
            if (session == null)
            {
                errorMessage = "Research session not found or you don't have permission to view it.";
            }
            else
            {
                errorMessage = string.Empty;
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Failed to load research session details.";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task RefreshSession()
    {
        await LoadSession();
    }

    private async Task StartResearch()
    {
        if (session == null) return;
        
        try
        {
            isStartingResearch = true;
            StateHasChanged();
            
            // Call the API to start research execution
            var response = await ResearchService.StartResearchExecutionAsync(SessionId);
            
            if (response)
            {
                // Refresh the session to get updated status
                await LoadSession();
                
                // Optionally start auto-refresh for progress updates
                _ = Task.Run(async () =>
                {
                    while (session?.Status == ResearchStatus.InProgress)
                    {
                        await Task.Delay(5000); // Wait 5 seconds
                        await InvokeAsync(async () => await LoadSession());
                    }
                });
            }
            else
            {
                errorMessage = "Failed to start research execution. Please try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred while starting research execution.";
        }
        finally
        {
            isStartingResearch = false;
            StateHasChanged();
        }
    }

    private void GoBackToDashboard()
    {
        NavigationState.NavigateTo("dashboard");
    }
}

<style>
    .session-details-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
    }

    .session-header {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        margin-bottom: 30px;
        padding-bottom: 20px;
        border-bottom: 1px solid #dee2e6;
    }

    .header-content h1 {
        color: #333;
        margin-bottom: 10px;
    }

    .session-status-badge {
        padding: 6px 12px;
        border-radius: 6px;
        font-size: 0.9rem;
        font-weight: 500;
        text-transform: uppercase;
    }

    .status-pending {
        background-color: #fef3c7;
        color: #92400e;
    }

    .status-inprogress {
        background-color: #dbeafe;
        color: #1e40af;
    }

    .status-completed {
        background-color: #d1fae5;
        color: #065f46;
    }

    .status-failed {
        background-color: #fecaca;
        color: #991b1b;
    }

    .header-actions {
        display: flex;
        gap: 10px;
    }

    .session-content {
        display: grid;
        gap: 30px;
    }

    .session-info {
        display: grid;
        gap: 20px;
    }

    .info-card, .progress-card, .error-card {
        background: white;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .info-card h3, .progress-card h3, .error-card h3 {
        margin-bottom: 15px;
        color: #333;
    }

    .info-item {
        margin-bottom: 15px;
    }

    .info-item strong {
        display: block;
        margin-bottom: 5px;
        color: #555;
    }

    .badge {
        padding: 4px 8px;
        border-radius: 4px;
        font-size: 0.8rem;
    }

    .bg-primary { background-color: #007bff; color: white; }
    .bg-info { background-color: #17a2b8; color: white; }
    .bg-secondary { background-color: #6c757d; color: white; }

    .progress {
        width: 100%;
        height: 20px;
        background-color: #e9ecef;
        border-radius: 10px;
        overflow: hidden;
        margin-bottom: 10px;
    }

    .progress-bar {
        height: 100%;
        background-color: #28a745;
        text-align: center;
        line-height: 20px;
        color: white;
        font-size: 0.8rem;
        transition: width 0.3s ease;
    }

    .insights-section, .options-section {
        margin-top: 30px;
    }

    .insights-section h3, .options-section h3 {
        color: #333;
        margin-bottom: 20px;
    }

    .insights-grid, .options-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 20px;
    }

    .insight-card, .option-card {
        background: white;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .insight-card h4, .option-card h4 {
        color: #333;
        margin-bottom: 10px;
    }

    .option-scores {
        display: flex;
        gap: 20px;
        margin: 15px 0;
    }

    .score {
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    .score span {
        font-size: 0.9rem;
        color: #666;
    }

    .score strong {
        font-size: 1.1rem;
        color: #007bff;
    }

    .option-notes {
        font-style: italic;
        color: #666;
        margin-top: 10px;
    }

    .loading-container {
        text-align: center;
        padding: 60px 20px;
    }

    .loading-container .spinner-border {
        width: 3rem;
        height: 3rem;
        margin-bottom: 20px;
    }

    .error-container {
        text-align: center;
        padding: 60px 20px;
    }

    .alert-danger {
        background-color: #f8d7da;
        border-color: #f5c6cb;
        color: #721c24;
        padding: 20px;
        border-radius: 8px;
        border: 1px solid;
    }

    .btn {
        padding: 8px 16px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        gap: 5px;
        font-weight: 500;
        transition: background-color 0.2s;
    }

    .btn-primary {
        background-color: #007bff;
        color: white;
    }

    .btn-primary:hover {
        background-color: #0056b3;
    }

    .btn-secondary {
        background-color: #6c757d;
        color: white;
    }

    .btn-secondary:hover {
        background-color: #545b62;
    }
</style>