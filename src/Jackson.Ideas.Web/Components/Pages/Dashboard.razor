@page "/dashboard"
@rendermode InteractiveServer
@using Jackson.Ideas.Core.DTOs.Research
@using Jackson.Ideas.Core.DTOs.Auth
@using Jackson.Ideas.Core.Entities
@using Jackson.Ideas.Core.Enums
@using Jackson.Ideas.Web.Services
@using System.Text.Json
@using Microsoft.AspNetCore.Authorization
@inject HttpClient Http
@inject Jackson.Ideas.Web.Services.NavigationState NavigationState
@inject IAuthenticationService AuthService
@inject IResearchSessionApiService ResearchService
@inject AuthenticationStateProvider AuthStateProvider

<PageTitle>Dashboard - Ideas Matter</PageTitle>

<div class="dashboard-container">
    <div class="dashboard-header">
        <h1>Welcome back, @currentUser?.Name</h1>
        <p>Transform your ideas into reality with AI-powered research and analysis</p>
    </div>

    <div class="dashboard-actions">
        <button class="btn btn-primary btn-new-idea" @onclick="StartNewIdea">
            <i class="fas fa-plus"></i>
            New Idea Research
        </button>
        <button class="btn btn-warning" @onclick="StartWithMockIdea">
            <i class="fas fa-magic"></i>
            Try Mock Idea
        </button>
        <button class="btn btn-secondary" @onclick="Logout">
            <i class="fas fa-sign-out-alt"></i>
            Logout
        </button>
    </div>

    @if (researchSessions != null)
    {
        <div class="dashboard-stats">
            <div class="row">
                <div class="col-md-3 col-6">
                    <div class="stat-card">
                        <div class="stat-icon">
                            <i class="fas fa-lightbulb"></i>
                        </div>
                        <div class="stat-content">
                            <div class="stat-number">@researchSessions.Count</div>
                            <div class="stat-label">Total Ideas</div>
                        </div>
                    </div>
                </div>
                <div class="col-md-3 col-6">
                    <div class="stat-card">
                        <div class="stat-icon completed">
                            <i class="fas fa-check-circle"></i>
                        </div>
                        <div class="stat-content">
                            <div class="stat-number">@completedCount</div>
                            <div class="stat-label">Completed</div>
                        </div>
                    </div>
                </div>
                <div class="col-md-3 col-6">
                    <div class="stat-card">
                        <div class="stat-icon progress">
                            <i class="fas fa-spinner"></i>
                        </div>
                        <div class="stat-content">
                            <div class="stat-number">@inProgressCount</div>
                            <div class="stat-label">In Progress</div>
                        </div>
                    </div>
                </div>
                <div class="col-md-3 col-6">
                    <div class="stat-card">
                        <div class="stat-icon pending">
                            <i class="fas fa-clock"></i>
                        </div>
                        <div class="stat-content">
                            <div class="stat-number">@pendingCount</div>
                            <div class="stat-label">Pending</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }

    @if (isLoading)
    {
        <div class="loading-container">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p>Loading your research sessions...</p>
        </div>
    }
    else if (researchSessions != null && researchSessions.Any())
    {
        <div class="sessions-grid">
            <h2>Your Research Sessions</h2>
            <div class="row">
                @foreach (var session in researchSessions)
                {
                    <div class="col-md-6 col-lg-4 mb-4">
                        <div class="session-card">
                            <div class="session-header">
                                <h3>@session.Title</h3>
                                <span class="session-status status-@session.Status.ToString().ToLower()">
                                    @session.Status
                                </span>
                            </div>
                            <div class="session-content">
                                <p class="session-description">@TruncateDescription(session.Description, 100)</p>
                                
                                @if (session.Status == ResearchStatus.InProgress || session.Status == ResearchStatus.Completed)
                                {
                                    <div class="session-progress">
                                        <div class="progress-label">
                                            <span>Progress: @session.ProgressPercentage.ToString("F0")%</span>
                                            @if (session.AnalysisConfidence.HasValue)
                                            {
                                                <span class="confidence-badge">@session.AnalysisConfidence.Value.ToString("F0")% confidence</span>
                                            }
                                        </div>
                                        <div class="progress-bar">
                                            <div class="progress-fill" style="width: @session.ProgressPercentage%"></div>
                                        </div>
                                    </div>
                                }
                                
                                <div class="session-meta">
                                    <div class="meta-item">
                                        <i class="fas fa-calendar"></i>
                                        <span>@session.CreatedAt.ToString("MMM dd, yyyy")</span>
                                    </div>
                                    @if (!string.IsNullOrEmpty(session.ResearchType))
                                    {
                                        <div class="meta-item">
                                            <i class="fas fa-tag"></i>
                                            <span>@session.ResearchType</span>
                                        </div>
                                    }
                                    @if (session.EstimatedDurationMinutes > 0)
                                    {
                                        <div class="meta-item">
                                            <i class="fas fa-clock"></i>
                                            <span>@session.EstimatedDurationMinutes min</span>
                                        </div>
                                    }
                                    @if (session.ResearchInsights?.Any() == true)
                                    {
                                        <div class="meta-item insights">
                                            <i class="fas fa-lightbulb"></i>
                                            <span>@session.ResearchInsights.Count insights</span>
                                        </div>
                                    }
                                </div>
                            </div>
                            <div class="session-actions">
                                <button class="btn btn-sm btn-primary" @onclick="() => ViewSession(session.Id)">
                                    <i class="fas fa-eye"></i> View
                                </button>
                                @if (session.Status == ResearchStatus.Pending || session.Status == ResearchStatus.Failed)
                                {
                                    <button class="btn btn-sm btn-success" @onclick="() => StartSession(session.Id)">
                                        <i class="fas fa-play"></i> Start
                                    </button>
                                }
                                <button class="btn btn-sm btn-outline-secondary" @onclick="() => EditSession(session.Id)">
                                    <i class="fas fa-edit"></i> Edit
                                </button>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    }
    else
    {
        <div class="empty-state">
            <div class="empty-icon">
                <i class="fas fa-lightbulb"></i>
            </div>
            <h3>No Research Sessions Yet</h3>
            <p>Start your first idea research session to see how AI can help transform your concepts into actionable insights.</p>
            <button class="btn btn-primary" @onclick="StartNewIdea">
                <i class="fas fa-plus"></i>
                Create Your First Research Session
            </button>
        </div>
    }

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger" role="alert">
            @errorMessage
        </div>
    }
</div>

@code {
    private UserInfo? currentUser;
    private List<ResearchSession>? researchSessions;
    private bool isLoading = true;
    private string errorMessage = string.Empty;
    
    // Dashboard statistics
    private int completedCount => researchSessions?.Count(s => s.Status == ResearchStatus.Completed) ?? 0;
    private int inProgressCount => researchSessions?.Count(s => s.Status == ResearchStatus.InProgress) ?? 0;
    private int pendingCount => researchSessions?.Count(s => s.Status == ResearchStatus.Pending) ?? 0;
    private int failedCount => researchSessions?.Count(s => s.Status == ResearchStatus.Failed) ?? 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadUserData();
        await LoadResearchSessions();
    }

    private async Task LoadUserData()
    {
        try
        {
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
           // if (authState.User.Identity?.IsAuthenticated == true)
            //{
                currentUser = new UserInfo
                {
                    Id = authState.User.FindFirst("sub")?.Value ?? authState.User.FindFirst("id")?.Value ?? Guid.NewGuid().ToString(),
                    Name = authState.User.Identity.Name ?? "User",
                    Email = authState.User.FindFirst("email")?.Value ?? "user@example.com",
                    Role = authState.User.FindFirst("role")?.Value ?? "User",
                    IsVerified = true
                };
           // }
            // else
            // {
            //     Navigation.NavigateTo("/login");
            // }
        }
        catch (Exception ex)
        {
            errorMessage = "Failed to load user data.";
            NavigationState.NavigateTo("login");
        }
    }

    private async Task LoadResearchSessions()
    {
        try
        {
            // Load real research sessions from API
            researchSessions = await ResearchService.GetUserSessionsAsync();
            
            // Clear any error message
            errorMessage = string.Empty;
        }
        catch (Exception ex)
        {
            errorMessage = "Failed to load research sessions.";
            researchSessions = new List<ResearchSession>();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void StartNewIdea()
    {
        NavigationState.NavigateTo("new-idea");
    }

    private void StartWithMockIdea()
    {
        // Navigate to new idea page with a query parameter to indicate mock data
        NavigationState.NavigateTo("new-idea");
    }

    private void ViewSession(Guid sessionId)
    {
        NavigationState.NavigateTo("session-details");
    }

    private void EditSession(Guid sessionId)
    {
        NavigationState.NavigateTo("session-details");
    }

    private async Task StartSession(Guid sessionId)
    {
        try
        {
            // Start the research session
            await ResearchService.StartResearchExecutionAsync(sessionId);
            
            // Refresh the sessions list
            await LoadResearchSessions();
            
            // Navigate to the session details page
            NavigationState.NavigateTo("session-details");
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to start research session: {ex.Message}";
            StateHasChanged();
        }
    }

    private async Task Logout()
    {
        await AuthService.LogoutAsync();
        NavigationState.NavigateTo("home");
    }

    private string TruncateDescription(string? description, int maxLength)
    {
        if (string.IsNullOrEmpty(description))
            return "No description available";
        
        return description.Length <= maxLength 
            ? description 
            : $"{description.Substring(0, maxLength)}...";
    }
}

<style>
    .dashboard-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
    }

    .dashboard-header {
        text-align: center;
        margin-bottom: 30px;
    }

    .dashboard-header h1 {
        color: #333;
        font-size: 2.5rem;
        margin-bottom: 10px;
    }

    .dashboard-header p {
        color: #666;
        font-size: 1.1rem;
    }

    .dashboard-actions {
        display: flex;
        justify-content: center;
        gap: 15px;
        margin-bottom: 40px;
    }

    .dashboard-stats {
        margin-bottom: 40px;
    }

    .stat-card {
        background: white;
        border-radius: 12px;
        padding: 20px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        display: flex;
        align-items: center;
        gap: 15px;
        transition: transform 0.2s, box-shadow 0.2s;
        margin-bottom: 20px;
    }

    .stat-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 16px rgba(0, 0, 0, 0.15);
    }

    .stat-icon {
        width: 50px;
        height: 50px;
        border-radius: 10px;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-size: 1.5rem;
    }

    .stat-icon.completed {
        background: linear-gradient(135deg, #10b981 0%, #059669 100%);
    }

    .stat-icon.progress {
        background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%);
    }

    .stat-icon.pending {
        background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%);
    }

    .stat-content {
        flex: 1;
    }

    .stat-number {
        font-size: 2rem;
        font-weight: 700;
        color: #1f2937;
        margin-bottom: 4px;
    }

    .stat-label {
        font-size: 0.9rem;
        color: #6b7280;
        text-transform: uppercase;
        font-weight: 500;
        letter-spacing: 0.5px;
    }

    .btn-new-idea {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        border: none;
        padding: 12px 24px;
        border-radius: 8px;
        color: white;
        font-weight: 500;
        transition: transform 0.2s;
        cursor: pointer;
    }

    .btn-new-idea:hover {
        transform: translateY(-2px);
    }

    .btn-warning {
        background: linear-gradient(135deg, #f59e0b 0%, #ef4444 100%);
        border: none;
        padding: 12px 24px;
        border-radius: 8px;
        color: white;
        font-weight: 500;
        transition: transform 0.2s;
        cursor: pointer;
    }

    .btn-warning:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(245, 158, 11, 0.3);
    }

    .btn-secondary {
        background: #6c757d;
        border: none;
        padding: 12px 24px;
        border-radius: 8px;
        color: white;
        font-weight: 500;
        transition: transform 0.2s;
        cursor: pointer;
    }

    .btn-secondary:hover {
        background: #5a6268;
        transform: translateY(-2px);
    }

    .loading-container {
        text-align: center;
        padding: 60px 20px;
    }

    .loading-container .spinner-border {
        width: 3rem;
        height: 3rem;
        margin-bottom: 20px;
    }

    .sessions-grid h2 {
        color: #333;
        margin-bottom: 30px;
    }

    .session-card {
        background: white;
        border-radius: 10px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        padding: 20px;
        transition: transform 0.2s, box-shadow 0.2s;
        height: 100%;
        display: flex;
        flex-direction: column;
    }

    .session-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
    }

    .session-header {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        margin-bottom: 15px;
    }

    .session-header h3 {
        color: #333;
        font-size: 1.2rem;
        margin: 0;
        flex: 1;
        margin-right: 10px;
    }

    .session-status {
        padding: 4px 8px;
        border-radius: 4px;
        font-size: 0.8rem;
        font-weight: 500;
        text-transform: uppercase;
    }

    .status-pending {
        background-color: #fef3c7;
        color: #92400e;
    }

    .status-inprogress {
        background-color: #dbeafe;
        color: #1e40af;
    }

    .status-completed {
        background-color: #d1fae5;
        color: #065f46;
    }

    .status-failed {
        background-color: #fecaca;
        color: #991b1b;
    }

    .session-content {
        flex: 1;
        margin-bottom: 15px;
    }

    .session-description {
        color: #666;
        margin-bottom: 10px;
        line-height: 1.5;
    }

    .session-progress {
        margin-bottom: 15px;
    }

    .progress-label {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 8px;
        font-size: 0.85rem;
        color: #4b5563;
    }

    .confidence-badge {
        background: #e0f2fe;
        color: #0277bd;
        padding: 2px 8px;
        border-radius: 12px;
        font-size: 0.75rem;
        font-weight: 500;
    }

    .progress-bar {
        height: 6px;
        background: #e5e7eb;
        border-radius: 3px;
        overflow: hidden;
    }

    .progress-fill {
        height: 100%;
        background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
        transition: width 0.3s ease;
    }

    .session-meta {
        display: flex;
        flex-direction: column;
        gap: 8px;
        margin-bottom: 15px;
    }

    .meta-item {
        display: flex;
        align-items: center;
        gap: 8px;
        font-size: 0.85rem;
        color: #6b7280;
    }

    .meta-item i {
        width: 14px;
        text-align: center;
        color: #9ca3af;
    }

    .meta-item.insights {
        color: #059669;
    }

    .meta-item.insights i {
        color: #10b981;
    }

    .session-actions {
        display: flex;
        gap: 10px;
    }

    .empty-state {
        text-align: center;
        padding: 80px 20px;
        background: #f8f9fa;
        border-radius: 10px;
        margin-top: 40px;
    }

    .empty-icon {
        font-size: 4rem;
        color: #ccc;
        margin-bottom: 20px;
    }

    .empty-state h3 {
        color: #333;
        margin-bottom: 15px;
    }

    .empty-state p {
        color: #666;
        margin-bottom: 30px;
        max-width: 500px;
        margin-left: auto;
        margin-right: auto;
    }

    .alert {
        margin-top: 20px;
        padding: 15px;
        border-radius: 8px;
        border: 1px solid transparent;
    }

    .alert-danger {
        background-color: #f8d7da;
        border-color: #f5c6cb;
        color: #721c24;
    }

</style>