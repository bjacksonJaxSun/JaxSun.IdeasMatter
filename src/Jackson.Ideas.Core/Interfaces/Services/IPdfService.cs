using Jackson.Ideas.Core.DTOs.Research;
using Jackson.Ideas.Core.DTOs.MarketAnalysis;
using Jackson.Ideas.Core.DTOs.BusinessPlan;

namespace Jackson.Ideas.Core.Interfaces.Services;

public interface IPdfService
{
    /// <summary>
    /// Generate a comprehensive research report PDF
    /// </summary>
    Task<byte[]> GenerateResearchReportAsync(
        ResearchReportDto reportData,
        PdfGenerationOptions? options = null,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// Generate a SWOT analysis PDF
    /// </summary>
    Task<byte[]> GenerateSwotAnalysisPdfAsync(
        SwotAnalysisResult swotAnalysis,
        string ideaTitle,
        string ideaDescription,
        PdfGenerationOptions? options = null,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// Generate a market analysis PDF
    /// </summary>
    Task<byte[]> GenerateMarketAnalysisPdfAsync(
        MarketAnalysisDto marketAnalysis,
        CompetitiveLandscapeDto? competitiveLandscape = null,
        PdfGenerationOptions? options = null,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// Generate a business plan PDF
    /// </summary>
    Task<byte[]> GenerateBusinessPlanPdfAsync(
        BusinessPlanDto businessPlan,
        PdfGenerationOptions? options = null,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// Generate a competitive analysis PDF
    /// </summary>
    Task<byte[]> GenerateCompetitiveAnalysisPdfAsync(
        CompetitiveAnalysisResult competitiveAnalysis,
        string ideaTitle,
        string ideaDescription,
        PdfGenerationOptions? options = null,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// Generate a customer segmentation PDF
    /// </summary>
    Task<byte[]> GenerateCustomerSegmentationPdfAsync(
        CustomerSegmentationResult segmentation,
        string ideaTitle,
        string ideaDescription,
        PdfGenerationOptions? options = null,
        CancellationToken cancellationToken = default);
}

public class PdfGenerationOptions
{
    public string? TemplateName { get; set; } = "default";
    public bool IncludeMetadata { get; set; } = true;
    public bool CompressPdf { get; set; } = true;
    public string? HeaderColor { get; set; } = "#1f2937";
    public string? FontFamily { get; set; } = "Arial";
    public string? LogoPath { get; set; }
    public string? FooterText { get; set; } = "Generated by Ideas Matter";
    public bool IncludeCharts { get; set; } = true;
    public string? Watermark { get; set; }
    public PageOrientation Orientation { get; set; } = PageOrientation.Portrait;
    public PaperSize PaperSize { get; set; } = PaperSize.Letter;
}

public enum PageOrientation
{
    Portrait,
    Landscape
}

public enum PaperSize
{
    Letter,
    A4,
    Legal
}