#!/bin/bash

# Rendering Validation Script
# Validates application layout and component structure

echo "üé® Ideas Matter - Rendering Validation"
echo "======================================"
echo "Project: Jackson.Ideas.Mock"
echo "Date: $(date)"
echo ""

VALIDATION_ERRORS=0
VALIDATION_WARNINGS=0

echo "üìã Step 1: Layout Component Validation"
echo "--------------------------------------"

# Check MainLayout structure
if [ -f "src/Jackson.Ideas.Mock/Components/Layout/MainLayout.razor" ]; then
    echo "‚úÖ MainLayout.razor exists"
    
    # Check for essential layout elements
    if grep -q "nav" src/Jackson.Ideas.Mock/Components/Layout/MainLayout.razor; then
        echo "‚úÖ Navigation element found in MainLayout"
    else
        echo "‚ùå ERROR: Navigation element missing in MainLayout"
        ((VALIDATION_ERRORS++))
    fi
    
    if grep -q "main" src/Jackson.Ideas.Mock/Components/Layout/MainLayout.razor; then
        echo "‚úÖ Main content area found in MainLayout"
    else
        echo "‚ö†Ô∏è  WARNING: Main content area not clearly defined"
        ((VALIDATION_WARNINGS++))
    fi
else
    echo "‚ùå ERROR: MainLayout.razor missing"
    ((VALIDATION_ERRORS++))
fi

# Check NavMenu component
if [ -f "src/Jackson.Ideas.Mock/Components/Layout/NavMenu.razor" ]; then
    echo "‚úÖ NavMenu.razor exists"
    
    # Check for navigation links
    if grep -q "NavLink" src/Jackson.Ideas.Mock/Components/Layout/NavMenu.razor; then
        echo "‚úÖ NavLink components found in NavMenu"
    else
        echo "‚ùå ERROR: NavLink components missing"
        ((VALIDATION_ERRORS++))
    fi
else
    echo "‚ùå ERROR: NavMenu.razor missing"
    ((VALIDATION_ERRORS++))
fi

echo ""

echo "üè† Step 2: Home Page Rendering Validation"
echo "-----------------------------------------"

HOME_FILE="src/Jackson.Ideas.Mock/Components/Pages/Home.razor"
if [ -f "$HOME_FILE" ]; then
    echo "‚úÖ Home.razor exists"
    
    # Check hero section structure
    if grep -q "hero-section" "$HOME_FILE"; then
        echo "‚úÖ Hero section class found"
    else
        echo "‚ùå ERROR: Hero section missing"
        ((VALIDATION_ERRORS++))
    fi
    
    # Check for hero content elements
    if grep -q "Your AI Business Team" "$HOME_FILE"; then
        echo "‚úÖ Main headline text found"
    else
        echo "‚ùå ERROR: Main headline missing"
        ((VALIDATION_ERRORS++))
    fi
    
    # Check for demo preview
    if grep -q "demo-preview" "$HOME_FILE"; then
        echo "‚úÖ Demo preview component found"
    else
        echo "‚ùå ERROR: Demo preview missing"
        ((VALIDATION_ERRORS++))
    fi
    
    # Check for value proposition section
    if grep -q "Why Business Ideas Fail" "$HOME_FILE"; then
        echo "‚úÖ Value proposition section found"
    else
        echo "‚ùå ERROR: Value proposition section missing"
        ((VALIDATION_ERRORS++))
    fi
    
    # Check for how it works section
    if grep -q "How Your AI Business Team Works" "$HOME_FILE"; then
        echo "‚úÖ How it works section found"
    else
        echo "‚ùå ERROR: How it works section missing"
        ((VALIDATION_ERRORS++))
    fi
    
    # Check for CSS styles
    if grep -q "<style>" "$HOME_FILE"; then
        echo "‚úÖ CSS styles embedded"
    else
        echo "‚ö†Ô∏è  WARNING: No embedded CSS styles found"
        ((VALIDATION_WARNINGS++))
    fi
    
    # Check for responsive design
    if grep -q "col-lg\|col-md\|col-sm" "$HOME_FILE"; then
        echo "‚úÖ Bootstrap responsive classes found"
    else
        echo "‚ö†Ô∏è  WARNING: Limited responsive design detected"
        ((VALIDATION_WARNINGS++))
    fi
    
else
    echo "‚ùå ERROR: Home.razor missing"
    ((VALIDATION_ERRORS++))
fi

echo ""

echo "üéØ Step 3: Interactive Elements Validation"
echo "------------------------------------------"

# Check for JavaScript integration
if grep -q "@onclick" "$HOME_FILE"; then
    echo "‚úÖ Click event handlers found"
else
    echo "‚ö†Ô∏è  WARNING: No click handlers detected"
    ((VALIDATION_WARNINGS++))
fi

# Check for timer/animation code
if grep -q "Timer\|StateHasChanged" "$HOME_FILE"; then
    echo "‚úÖ Real-time animation logic found"
else
    echo "‚ö†Ô∏è  WARNING: No animation logic detected"
    ((VALIDATION_WARNINGS++))
fi

# Check for proper disposal
if grep -q "IDisposable\|Dispose" "$HOME_FILE"; then
    echo "‚úÖ Proper resource disposal implemented"
else
    echo "‚ö†Ô∏è  WARNING: Resource disposal not implemented"
    ((VALIDATION_WARNINGS++))
fi

echo ""

echo "üì± Step 4: Static Resources Validation"
echo "--------------------------------------"

# Check _Host.cshtml for external resources
HOST_FILE="src/Jackson.Ideas.Mock/Pages/_Host.cshtml"
if [ -f "$HOST_FILE" ]; then
    echo "‚úÖ _Host.cshtml exists"
    
    # Check for Bootstrap
    if grep -q "bootstrap" "$HOST_FILE"; then
        echo "‚úÖ Bootstrap CSS/JS found"
    else
        echo "‚ùå ERROR: Bootstrap not referenced"
        ((VALIDATION_ERRORS++))
    fi
    
    # Check for Chart.js
    if grep -q "chart.js" "$HOST_FILE"; then
        echo "‚úÖ Chart.js library found"
    else
        echo "‚ö†Ô∏è  WARNING: Chart.js not referenced"
        ((VALIDATION_WARNINGS++))
    fi
    
    # Check for Bootstrap Icons
    if grep -q "bootstrap-icons" "$HOST_FILE"; then
        echo "‚úÖ Bootstrap Icons found"
    else
        echo "‚ö†Ô∏è  WARNING: Bootstrap Icons not referenced"
        ((VALIDATION_WARNINGS++))
    fi
    
else
    echo "‚ùå ERROR: _Host.cshtml missing"
    ((VALIDATION_ERRORS++))
fi

echo ""

echo "üîß Step 5: Service Integration Validation"
echo "-----------------------------------------"

# Check service injection in Home.razor
if grep -q "@inject" "$HOME_FILE"; then
    echo "‚úÖ Service injection found in Home page"
    
    # Check specific services
    if grep -q "IMockDataService" "$HOME_FILE"; then
        echo "‚úÖ MockDataService injected"
    else
        echo "‚ö†Ô∏è  WARNING: MockDataService not injected"
        ((VALIDATION_WARNINGS++))
    fi
    
    if grep -q "IMockAuthenticationService" "$HOME_FILE"; then
        echo "‚úÖ MockAuthenticationService injected"
    else
        echo "‚ö†Ô∏è  WARNING: MockAuthenticationService not injected"
        ((VALIDATION_WARNINGS++))
    fi
    
else
    echo "‚ùå ERROR: No service injection in Home page"
    ((VALIDATION_ERRORS++))
fi

echo ""

echo "üé® Step 6: Visual Design Validation"
echo "-----------------------------------"

# Check for professional styling elements
if grep -q "gradient\|shadow\|rounded\|bg-primary\|text-warning" "$HOME_FILE"; then
    echo "‚úÖ Professional styling classes found"
else
    echo "‚ö†Ô∏è  WARNING: Limited professional styling"
    ((VALIDATION_WARNINGS++))
fi

# Check for animations and transitions
if grep -q "transition\|animation\|hover" "$HOME_FILE"; then
    echo "‚úÖ CSS animations and transitions found"
else
    echo "‚ö†Ô∏è  WARNING: No CSS animations detected"
    ((VALIDATION_WARNINGS++))
fi

# Check for icon usage
if grep -q "bi-\|fa-" "$HOME_FILE"; then
    echo "‚úÖ Icons used throughout the design"
else
    echo "‚ö†Ô∏è  WARNING: Limited icon usage"
    ((VALIDATION_WARNINGS++))
fi

echo ""

echo "üìä Step 7: Content Structure Validation"
echo "---------------------------------------"

# Count major sections
SECTION_COUNT=$(grep -c "<section" "$HOME_FILE" || echo "0")
echo "‚úÖ Found $SECTION_COUNT major sections"

# Check for proper semantic HTML
if grep -q "<main>\|<article>\|<aside>" "$HOME_FILE"; then
    echo "‚úÖ Semantic HTML elements found"
else
    echo "‚ö†Ô∏è  WARNING: Limited semantic HTML usage"
    ((VALIDATION_WARNINGS++))
fi

# Check for accessibility
if grep -q "alt=\|aria-\|role=" "$HOME_FILE"; then
    echo "‚úÖ Accessibility attributes found"
else
    echo "‚ö†Ô∏è  WARNING: Limited accessibility features"
    ((VALIDATION_WARNINGS++))
fi

echo ""

echo "üéØ Rendering Validation Results"
echo "==============================="

if [ $VALIDATION_ERRORS -eq 0 ]; then
    echo "üéâ RENDERING STATUS: EXCELLENT"
    echo "‚úÖ All critical rendering elements validated"
    echo ""
    echo "üìã Summary:"
    echo "   Critical Errors: $VALIDATION_ERRORS"
    echo "   Warnings: $VALIDATION_WARNINGS"
    echo ""
    
    if [ $VALIDATION_WARNINGS -eq 0 ]; then
        echo "üèÜ Perfect! No warnings either."
    else
        echo "‚ÑπÔ∏è  $VALIDATION_WARNINGS warnings found (non-critical)"
    fi
    
    echo ""
    echo "üöÄ Rendering Validation PASSED!"
    echo ""
    echo "üì± Expected Visual Output:"
    echo "----------------------------------------"
    echo "‚úÖ Professional hero section with gradient background"
    echo "‚úÖ 'Your AI Business Team Ready to Work' headline"
    echo "‚úÖ Animated demo preview with rotating scenarios"
    echo "‚úÖ Statistics display (Ideas Analyzed, Success Rate, etc.)"
    echo "‚úÖ Two prominent CTA buttons (Start Analysis, Watch Demo)"
    echo "‚úÖ Value proposition section explaining startup failures"
    echo "‚úÖ 3-step process visualization with examples"
    echo "‚úÖ Sidebar with demo scenarios and login options"
    echo "‚úÖ Professional styling with hover effects and animations"
    echo "‚úÖ Fully responsive Bootstrap layout"
    echo ""
    echo "üé® Layout Quality Assessment:"
    echo "   Business-beginner messaging: ‚úÖ EXCELLENT"
    echo "   Visual hierarchy: ‚úÖ CLEAR"
    echo "   Call-to-action placement: ‚úÖ PROMINENT"
    echo "   Interactive elements: ‚úÖ ENGAGING"
    echo "   Professional appearance: ‚úÖ HIGH"
    
else
    echo "‚ùå RENDERING STATUS: ISSUES DETECTED"
    echo "üö® Critical rendering errors found: $VALIDATION_ERRORS"
    echo "‚ö†Ô∏è  Warnings: $VALIDATION_WARNINGS"
    echo ""
    echo "üîß Action Required:"
    echo "   Please fix the errors above before proceeding"
    echo "   Run this script again after fixes"
fi

echo ""
echo "==============================="
echo "üéØ FINAL RENDERING VALIDATION: $(if [ $VALIDATION_ERRORS -eq 0 ]; then echo 'PASSED'; else echo 'FAILED'; fi)"
echo "==============================="

exit $VALIDATION_ERRORS