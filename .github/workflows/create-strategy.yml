name: Create Vision Strategy

on:
  workflow_dispatch:
    inputs:
      vision_issue_number:
        description: 'Vision issue number (e.g., 123)'
        required: true
        type: string
      timeframe_months:
        description: 'Strategy timeframe in months'
        required: false
        type: string
        default: '18'
      preview:
        description: 'Preview mode - show what would be created without creating it'
        required: false
        type: boolean
        default: false

jobs:
  create-strategy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        pip install PyGithub openai anthropic
    
    - name: Get vision details
      id: get_vision
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Get issue details
        ISSUE_DETAILS=$(gh issue view ${{ inputs.vision_issue_number }} --json title,body,labels)
        
        # Check if it's a vision issue
        if ! echo "$ISSUE_DETAILS" | jq -r '.labels[].name' | grep -q "vision"; then
          echo "Error: Issue #${{ inputs.vision_issue_number }} is not labeled as a vision"
          exit 1
        fi
        
        # Extract product name from title
        PRODUCT_NAME=$(echo "$ISSUE_DETAILS" | jq -r '.title' | sed 's/Vision: //')
        echo "product_name=$PRODUCT_NAME" >> $GITHUB_OUTPUT
        
        # Extract vision file path from body
        VISION_PATH=$(echo "$ISSUE_DETAILS" | jq -r '.body' | grep -oP 'docs/visions/[^/]+/vision\.md' | head -1)
        if [ -z "$VISION_PATH" ]; then
          VISION_PATH="Commands/docs/visions/$(echo "$PRODUCT_NAME" | tr '[:upper:]' '[:lower:]' | tr ' ' '-')/vision.md"
        fi
        echo "vision_path=$VISION_PATH" >> $GITHUB_OUTPUT
        
        # Save issue body for strategy generation
        echo "$ISSUE_DETAILS" | jq -r '.body' > /tmp/vision_issue.md
    
    - name: Read vision document
      id: read_vision
      run: |
        if [ ! -f "${{ steps.get_vision.outputs.vision_path }}" ]; then
          echo "Error: Vision file not found at ${{ steps.get_vision.outputs.vision_path }}"
          exit 1
        fi
        
        # Read vision content
        VISION_CONTENT=$(cat "${{ steps.get_vision.outputs.vision_path }}")
        
        # Save for next steps
        cat "${{ steps.get_vision.outputs.vision_path }}" > /tmp/vision_content.md
        
        echo "Vision document loaded successfully"
    
    - name: Generate strategy with AI
      id: generate_strategy
      env:
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        # Create strategy content using a simple template approach
        TIMEFRAME="${{ inputs.timeframe_months }}"
        PRODUCT_NAME="${{ steps.get_vision.outputs.product_name }}"
        
        # Create strategy directory
        STRATEGY_DIR="Commands/docs/strategies/$(echo "$PRODUCT_NAME" | tr '[:upper:]' '[:lower:]' | tr ' ' '-')"
        mkdir -p "$STRATEGY_DIR"
        STRATEGY_PATH="$STRATEGY_DIR/strategy.md"
        
        # Create simple strategy document with bash
        cat > "$STRATEGY_PATH" << 'EOF'
# Vision Strategy - PLACEHOLDER_PRODUCT_NAME

## Strategy Overview

This PLACEHOLDER_TIMEFRAME-month strategy outlines the implementation approach for the PLACEHOLDER_PRODUCT_NAME vision, breaking down the journey into actionable phases with clear deliverables and success criteria.

## Strategic Phases

### Phase 1 - Foundation (Months 1-6)
- Establish core infrastructure and validate key assumptions
- Core platform architecture
- Basic feature set implementation
- Initial user feedback loops
- MVP release to early adopters

### Phase 2 - Growth (Months 7-12)  
- Expand capabilities and user base
- Enhanced feature set based on user feedback
- Scalability improvements
- Market expansion initiatives
- Partnership framework

### Phase 3 - Optimization (Months 13-PLACEHOLDER_TIMEFRAME)
- Refine and optimize for market leadership
- Advanced features and integrations
- Performance optimizations
- Market differentiation features
- Expansion into new segments

## Next Steps

1. Break down Phase 1 into detailed epics
2. Assign ownership and timelines  
3. Establish tracking mechanisms
4. Begin execution

---
*This strategy is a living document and will be updated based on learnings and market changes.*
EOF

        # Replace placeholders
        sed -i "s/PLACEHOLDER_PRODUCT_NAME/$PRODUCT_NAME/g" "$STRATEGY_PATH"
        sed -i "s/PLACEHOLDER_TIMEFRAME/$TIMEFRAME/g" "$STRATEGY_PATH"

        echo "strategy_path=$STRATEGY_PATH" >> $GITHUB_OUTPUT
        echo "strategy_dir=$STRATEGY_DIR" >> $GITHUB_OUTPUT
    
    - name: Create strategy issue
      if: ${{ inputs.preview == false }}
      id: create_issue
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Read phases
        PHASES=$(cat /tmp/phases.json)
        
        # Create issue body
        ISSUE_BODY=$(cat << 'EOF'
        # Vision Strategy: ${{ steps.get_vision.outputs.product_name }}
        
        ## Strategy Summary
        This ${{ inputs.timeframe_months }}-month implementation strategy breaks down the vision into actionable phases.
        
        ## Strategic Phases
        - **Foundation** (Months 1-6)
        - **Growth** (Months 7-12)
        - **Optimization** (Months 13-${{ inputs.timeframe_months }})
        
        ## Links
        - [Vision Issue](#${{ inputs.vision_issue_number }})
        - [Strategy Document](${{ github.server_url }}/${{ github.repository }}/blob/${{ github.ref_name }}/${{ steps.generate_strategy.outputs.strategy_path }})
        - [Create Epics Workflow](${{ github.server_url }}/${{ github.repository }}/actions/workflows/create-epics.yml)
        
        ## Next Steps
        1. Review and approve the strategy
        2. Create implementation epics using the `create-epics` workflow
        3. Break down epics into features and stories
        
        ---
        *This strategy was created from Vision #${{ inputs.vision_issue_number }}*
        EOF
        )
        
        # Create the issue
        ISSUE_URL=$(gh issue create \
          --title "Strategy: ${{ steps.get_vision.outputs.product_name }}" \
          --body "$ISSUE_BODY" \
          --label "strategy" \
          --assignee "${{ github.actor }}")
        
        echo "issue_url=$ISSUE_URL" >> $GITHUB_OUTPUT
        echo "issue_number=$(echo $ISSUE_URL | grep -oE '[0-9]+$')" >> $GITHUB_OUTPUT
        
        # Link to vision issue
        gh issue comment ${{ inputs.vision_issue_number }} \
          --body "ðŸŽ¯ Strategy created: #$(echo $ISSUE_URL | grep -oE '[0-9]+$')"
    
    - name: Create milestone
      if: ${{ inputs.preview == false }}
      id: create_milestone
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Calculate due date
        DUE_DATE=$(date -d "+${{ inputs.timeframe_months }} months" +%Y-%m-%d)
        
        # Create milestone
        gh api repos/${{ github.repository }}/milestones \
          -X POST \
          -f title="${{ steps.get_vision.outputs.product_name }} Strategy" \
          -f description="Implementation timeline for ${{ steps.get_vision.outputs.product_name }}" \
          -f due_on="${DUE_DATE}T00:00:00Z" \
          -f state="open"
    
    # Project update is disabled due to permissions
    - name: Skip Project Update
      if: ${{ inputs.preview == false }}
      run: |
        echo "Note: GitHub Project update is disabled due to permissions."
    
    - name: Commit strategy document
      if: ${{ inputs.preview == false }}
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        git add "${{ steps.generate_strategy.outputs.strategy_path }}"
        git commit -m "Add strategy for ${{ steps.get_vision.outputs.product_name }}"
        git push
    
    - name: Generate summary
      run: |
        if [ "${{ inputs.preview }}" == "true" ]; then
          echo "# Preview Mode - No Changes Made" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "# Vision Strategy Created: ${{ steps.get_vision.outputs.product_name }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ inputs.preview }}" == "false" ]; then
          echo "## Created Resources" >> $GITHUB_STEP_SUMMARY
          echo "- **Strategy Document**: ${{ steps.generate_strategy.outputs.strategy_path }}" >> $GITHUB_STEP_SUMMARY
          echo "- **GitHub Issue**: #${{ steps.create_issue.outputs.issue_number }}" >> $GITHUB_STEP_SUMMARY
          echo "- **GitHub Milestone**: ${{ inputs.timeframe_months }}-month timeline" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Review the strategy document" >> $GITHUB_STEP_SUMMARY
          echo "2. Run the Create Epics workflow with strategy issue #${{ steps.create_issue.outputs.issue_number }}" >> $GITHUB_STEP_SUMMARY
        else
          echo "## What Would Be Created" >> $GITHUB_STEP_SUMMARY
          echo "- Strategy document at: Commands/docs/strategies/..." >> $GITHUB_STEP_SUMMARY
          echo "- GitHub Issue with strategy summary" >> $GITHUB_STEP_SUMMARY
          echo "- GitHub Milestone for timeline tracking" >> $GITHUB_STEP_SUMMARY
          echo "- Link back to vision issue" >> $GITHUB_STEP_SUMMARY
        fi