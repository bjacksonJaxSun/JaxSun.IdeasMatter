name: Create Epics from Strategy

on:
  workflow_dispatch:
    inputs:
      strategy_issue_number:
        description: 'Strategy issue number (e.g., 123)'
        required: true
        type: string
      max_epics:
        description: 'Maximum number of epics to create'
        required: false
        type: string
        default: '5'
      preview:
        description: 'Preview mode - show what would be created without creating it'
        required: false
        type: boolean
        default: false

jobs:
  create-epics:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
      projects: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Get strategy details
      id: get_strategy
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Get issue details
        ISSUE_DETAILS=$(gh issue view ${{ inputs.strategy_issue_number }} --json title,body,labels)
        
        # Check if it's a strategy issue
        if ! echo "$ISSUE_DETAILS" | jq -r '.labels[].name' | grep -q "strategy"; then
          echo "Error: Issue #${{ inputs.strategy_issue_number }} is not labeled as a strategy"
          exit 1
        fi
        
        # Extract product name from title
        PRODUCT_NAME=$(echo "$ISSUE_DETAILS" | jq -r '.title' | sed 's/Strategy: //')
        echo "product_name=$PRODUCT_NAME" >> $GITHUB_OUTPUT
        
        # Extract strategy path
        STRATEGY_PATH=$(echo "$ISSUE_DETAILS" | jq -r '.body' | grep -oP 'docs/strategies/[^)]+\.md' | head -1)
        if [ -z "$STRATEGY_PATH" ]; then
          STRATEGY_PATH="Commands/docs/strategies/$(echo "$PRODUCT_NAME" | tr '[:upper:]' '[:lower:]' | tr ' ' '-')/strategy.md"
        fi
        echo "strategy_path=$STRATEGY_PATH" >> $GITHUB_OUTPUT
        
        # Extract vision issue number
        VISION_ISSUE=$(echo "$ISSUE_DETAILS" | jq -r '.body' | grep -oP '#\d+' | head -1 | tr -d '#')
        echo "vision_issue=$VISION_ISSUE" >> $GITHUB_OUTPUT
    
    - name: Generate epics
      id: generate_epics
      run: |
        python3 << 'EOF'
        import json
        import os
        
        product_name = "${{ steps.get_strategy.outputs.product_name }}"
        max_epics = int("${{ inputs.max_epics }}")
        
        # Define epics based on common patterns
        epic_templates = [
            {
                "title": f"Core Platform Development - {product_name}",
                "description": "Build the foundational architecture and core features",
                "priority": "high",
                "phase": "1",
                "acceptance_criteria": [
                    "Core architecture implemented and documented",
                    "Basic authentication and authorization working",
                    "Data models defined and implemented",
                    "API framework established",
                    "Development environment setup complete"
                ]
            },
            {
                "title": f"User Interface and Experience - {product_name}",
                "description": "Create intuitive and responsive user interfaces",
                "priority": "high",
                "phase": "1",
                "acceptance_criteria": [
                    "UI/UX design system established",
                    "Responsive layouts implemented",
                    "Accessibility standards met (WCAG 2.1)",
                    "User workflows optimized",
                    "Performance targets achieved"
                ]
            },
            {
                "title": f"AI/ML Integration - {product_name}",
                "description": "Implement artificial intelligence and machine learning capabilities",
                "priority": "medium",
                "phase": "2",
                "acceptance_criteria": [
                    "AI provider integrations complete",
                    "ML models trained and deployed",
                    "Inference pipeline optimized",
                    "Accuracy metrics meet targets",
                    "Fallback mechanisms in place"
                ]
            },
            {
                "title": f"Security and Compliance - {product_name}",
                "description": "Ensure platform security and regulatory compliance",
                "priority": "high",
                "phase": "1",
                "acceptance_criteria": [
                    "Security audit completed",
                    "Penetration testing passed",
                    "Compliance frameworks implemented",
                    "Data encryption at rest and in transit",
                    "Access controls and audit logs functioning"
                ]
            },
            {
                "title": f"Integration and APIs - {product_name}",
                "description": "Build external integrations and API ecosystem",
                "priority": "medium",
                "phase": "2",
                "acceptance_criteria": [
                    "RESTful API documented and tested",
                    "GraphQL endpoint available",
                    "Webhook system implemented",
                    "Third-party integrations complete",
                    "API rate limiting and monitoring active"
                ]
            },
            {
                "title": f"Testing and Quality Assurance - {product_name}",
                "description": "Comprehensive testing framework and QA processes",
                "priority": "high",
                "phase": "1",
                "acceptance_criteria": [
                    "Unit test coverage > 80%",
                    "Integration tests for all workflows",
                    "E2E test suite automated",
                    "Performance benchmarks established",
                    "CI/CD pipeline fully operational"
                ]
            },
            {
                "title": f"DevOps and Infrastructure - {product_name}",
                "description": "Cloud infrastructure and deployment automation",
                "priority": "high",
                "phase": "1",
                "acceptance_criteria": [
                    "Infrastructure as Code implemented",
                    "Auto-scaling configured",
                    "Monitoring and alerting active",
                    "Backup and disaster recovery tested",
                    "Zero-downtime deployment achieved"
                ]
            },
            {
                "title": f"Analytics and Insights - {product_name}",
                "description": "Build analytics dashboard and reporting capabilities",
                "priority": "medium",
                "phase": "2",
                "acceptance_criteria": [
                    "Analytics pipeline established",
                    "Real-time dashboards available",
                    "Custom reports functionality",
                    "Data warehouse optimized",
                    "Predictive analytics implemented"
                ]
            },
            {
                "title": f"Mobile Experience - {product_name}",
                "description": "Native mobile applications and responsive design",
                "priority": "medium",
                "phase": "3",
                "acceptance_criteria": [
                    "Mobile app MVP released",
                    "Cross-platform compatibility",
                    "Offline functionality implemented",
                    "Push notifications working",
                    "App store deployment complete"
                ]
            },
            {
                "title": f"Marketplace and Extensions - {product_name}",
                "description": "Plugin system and third-party developer ecosystem",
                "priority": "low",
                "phase": "3",
                "acceptance_criteria": [
                    "Plugin architecture defined",
                    "Developer SDK available",
                    "Marketplace UI implemented",
                    "Review and approval process",
                    "Revenue sharing system active"
                ]
            }
        ]
        
        # Limit to requested number
        epics = epic_templates[:max_epics]
        
        # Save epics for creation
        with open('/tmp/epics.json', 'w') as f:
            json.dump(epics, f)
        
        print(f"Generated {len(epics)} epics for {product_name}")
        EOF
    
    - name: Create epic issues
      if: ${{ inputs.preview == false }}
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Read generated epics
        EPICS=$(cat /tmp/epics.json)
        
        # Track created issues
        CREATED_ISSUES=""
        
        # Create each epic
        echo "$EPICS" | jq -c '.[]' | while read -r epic; do
          TITLE=$(echo "$epic" | jq -r '.title')
          DESCRIPTION=$(echo "$epic" | jq -r '.description')
          PRIORITY=$(echo "$epic" | jq -r '.priority')
          PHASE=$(echo "$epic" | jq -r '.phase')
          CRITERIA=$(echo "$epic" | jq -r '.acceptance_criteria[]' | sed 's/^/- [ ] /')
          
          # Create issue body
          ISSUE_BODY=$(cat << EOF
## Epic Description
$DESCRIPTION

## Phase
Phase $PHASE of the implementation strategy

## Priority
$PRIORITY

## Acceptance Criteria
$CRITERIA

## Links
- [Strategy Issue](#${{ inputs.strategy_issue_number }})
- [Vision Issue](#${{ steps.get_strategy.outputs.vision_issue }})

## Next Steps
1. Break down into features using the create-features workflow
2. Assign epic owner
3. Define timeline and milestones

---
*This epic was generated from Strategy #${{ inputs.strategy_issue_number }}*
EOF
          )
          
          # Create the issue
          ISSUE_URL=$(gh issue create \
            --title "$TITLE" \
            --body "$ISSUE_BODY" \
            --label "epic,$PRIORITY-priority" \
            --assignee "${{ github.actor }}")
          
          ISSUE_NUMBER=$(echo $ISSUE_URL | grep -oE '[0-9]+$')
          echo "Created Epic #$ISSUE_NUMBER: $TITLE"
          
          # Add to tracking
          if [ -z "$CREATED_ISSUES" ]; then
            CREATED_ISSUES="$ISSUE_NUMBER"
          else
            CREATED_ISSUES="$CREATED_ISSUES,$ISSUE_NUMBER"
          fi
        done
        
        # Update strategy issue with created epics
        gh issue comment ${{ inputs.strategy_issue_number }} \
          --body "🎯 Created epics: $(echo $CREATED_ISSUES | sed 's/,/, #/g; s/^/#/')"
        
        echo "created_issues=$CREATED_ISSUES" >> $GITHUB_OUTPUT
    
    - name: Update project
      if: ${{ inputs.preview == false }}
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Find the project
        PROJECT_ID=$(gh project list --owner "${{ github.repository_owner }}" \
          --format json \
          | jq -r '.projects[] | select(.title | contains("${{ steps.get_strategy.outputs.product_name }}")) | .id' \
          | head -1)
        
        if [ -n "$PROJECT_ID" ]; then
          # Add epics to project
          IFS=',' read -ra ISSUES <<< "${{ steps.create_issues.outputs.created_issues }}"
          for issue in "${ISSUES[@]}"; do
            gh project item-add "$PROJECT_ID" \
              --owner "${{ github.repository_owner }}" \
              --url "https://github.com/${{ github.repository }}/issues/$issue"
          done
        fi
    
    - name: Generate summary
      run: |
        if [ "${{ inputs.preview }}" == "true" ]; then
          echo "# Preview Mode - No Changes Made" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Epics that would be created:" >> $GITHUB_STEP_SUMMARY
          cat /tmp/epics.json | jq -r '.[] | "- **\(.title)**\n  - Priority: \(.priority)\n  - Phase: \(.phase)"' >> $GITHUB_STEP_SUMMARY
        else
          echo "# Epics Created for ${{ steps.get_strategy.outputs.product_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Created Epics" >> $GITHUB_STEP_SUMMARY
          echo "The following epic issues were created:" >> $GITHUB_STEP_SUMMARY
          cat /tmp/epics.json | jq -r '.[] | "- \(.title)"' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Review each epic and adjust as needed" >> $GITHUB_STEP_SUMMARY
          echo "2. Run the Create Features workflow for each epic" >> $GITHUB_STEP_SUMMARY
          echo "3. Assign epic owners and set timelines" >> $GITHUB_STEP_SUMMARY
        fi